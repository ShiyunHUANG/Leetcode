package AmazonOA;
/*
 * Find path in maze
给个array,其中只有一格是9，其他格子是0或1，0表示此路不通，1表示可以走，判断从（0,0) 
点开始上下左右移动能否找到这个是9的格子
 * */

/**
 * Maze : 这题折腾了我好久啊！之前没时间把所有题都做一遍（地里的面经已经几乎涵盖了题库了），然后就没做这题，觉得不会遇到……

这题呢，用故事性强一点的说法就是，一只可怜的饥饿的小老鼠在一个N乘以N的迷宫里面（其实就一个二维数组……），它从（0，0）点开始出发，要寻找奶酪来吃（似乎是它闻到有奶酪的味了？）。

然后呢，这个二维数组表示的迷宫里面，1是路，0是墙（如果没记错的话，大家还是认真看看这个），值为9的地方是终点！

题目给出的就是这个二维数组，问你小老鼠最后能不能吃到奶酪（到达9）呢？能的话就返回true，不(e)能(si)的话就返回false。

我留意到了之前做过这个题的楼主提醒，老鼠在（0，0）开始，然后要测（0，0）就是终点（==9）的情况， 多么坑的一个corner case。

然后我就很欢(ku)乐(bi)地开始写了。但是！楼主这题花了30多分钟才写完，原因如下：

倒霉1： 楼主之前各种训练shortest time job first, round robin， 然后各种需要递归迭代的题通通很弱……于是这题就花了很长的时间。

倒霉2： 楼主的网络连接不给力，10分钟之内断了3次，重复登录3次，幸运的是都登录回去了。每次登出都得等2分钟来登回去。（现在想想我应该利用这个登出的时间把题妥妥的做完在登入啊！！）

倒霉3： 楼主没想到起点为0（墙）的情况是直接返回不能(false)的！那时候我已经被网络不佳给搞得特别慌了，就剩12分钟了，心里想着这回惨了，简单题都过不了。然后楼主一个不小心点到“test case”那个tab。（注意不是你的test case运行的情况，而是OA给出来的两个示例test case） 然后那里就有一个起点为墙返回为false…… 然后楼主立即马上迅速地加上了这条才过了的。 
 *
 */
public class Maze {

}
